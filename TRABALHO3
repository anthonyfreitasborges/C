#include <stdio.h>
#include <stdlib.h>
typedef struct{
    int id;
    char nome[20];
    int idade;
    int cpf;
    int plano;
}cadastro;

typedef struct{
    int id;
    char nome[20];
    int crm;
    char especialidade[30];
    char disponibilidade[10];
}medico;

typedef struct{
    int idConsulta[10];
    int idPaciente[10];
    int idMedico[10];
    int data;
}campo;


int cadastarPacientes(cadastro *passiente,int inicio, int n1){
	int t,y;

    for (int i = inicio; i < inicio + n1; i++){
        passiente[i].id=i;
        printf(":: %d\n",passiente[i].id);
        printf("digite os paciente %d\n",i);
        printf("digite o nome\n");
        getchar();
		fgets(passiente[i].nome,20,stdin);
     	printf("digite a idade \n");
     	scanf("%d",&passiente[i].idade);
     	while (getchar() != '\n');
     		do{
  	  			if(passiente[i].idade<0){
       		 	printf("idade invalida \n digite novamente\n");
        		scanf("%d",&passiente[i].idade);
        		if(passiente[i].idade<0){
            	t=1;
        		}else{
        			t=0;}
		     	}
            }while(t !=0);
     printf("digite o cpf \n");
    	scanf("%d",&passiente[i].cpf);
    	while (getchar() != '\n');
   		 for(int y=0;y<i;y++){
        	if(passiente[y].cpf == passiente[i].cpf){
        		printf("cpf ja foi usado digite um outro\n");
        		int temp=passiente[i].cpf;
        		scanf("%d",&passiente[i].cpf);
        		while (getchar() != '\n');
        		if(passiente[i].cpf==temp){
            	y--;}
        	}
    }
       printf("tem plano (0-nao, 1-sim) \n");
    	scanf("%d",&passiente[i].plano);

    }


    return n1;
}

int cadastrarMedicos(medico *doutor,int n2){
	int temp=0;
	for(int i=0;i<n2;i++){
        doutor[i].id=i;
		printf("digite o nome do medico\n");
		while (getchar() != '\n');  // limpa o buffer
		fgets(doutor[i].nome,20,stdin);
	    printf("digite o CRM do medico \n");
        scanf("%d",&doutor[i].crm);
        if(i>0){
        	 for(int y=0;y<i;y++){
        	 if(doutor[y].crm == doutor[i].crm){
        		printf("CRM ja foi usado digite um outro\n");
        		int temp=doutor[i].crm;
        		scanf("%d",&doutor[i].crm);
        		if(doutor[i].crm==temp){
            	y--; }
        	}
		 }
		}
        printf("digite a especialidade do medico\n");
		while (getchar() != '\n');  // limpa o buffer
		fgets(doutor[i].especialidade,30,stdin);
		printf("digite a disponibilidade do medico\n");
		fgets(doutor[i].disponibilidade,10,stdin);
	}
}



void mostrarDados(cadastro *passiente,medico *doutor, int n1,int n2) {
    printf("\n--- Lista de Pacientes ---\n");
    for (int i = 0; i < n1; i++) {
        printf("ID: %d\n", passiente[i].id);
        printf("Nome: %s\n", passiente[i].nome);
        printf("Idade: %d\n", passiente[i].idade);
        printf("CPF: %d\n", passiente[i].cpf);
        printf("Plano: %s\n", passiente[i].plano ? "Sim" : "Não");
        printf("----------------------------\n");
    }
    printf("\n--- Lista de medicos ---\n");
    for (int in = 0; in < n2; in++) {

        printf("ID: %d\n",doutor[in].id);
        printf("Nome: %s\n", doutor[in].nome);
        printf("CRM: %d\n", doutor[in].crm);
        printf("ESPECIALIDADE: %s\n", doutor[in].especialidade);
        printf("DISPONIBILIDADE: %s\n", doutor[in].disponibilidade);
        printf("----------------------------\n");
    }
}
int main() {
    int escolha, n1, n2;
    int totalPacientes = 0, totalMedicos = 0;
    cadastro *passiente = NULL;
    medico *doutor = NULL;

    printf("MENU\n");

    do {
        printf("1-CADASTRAR PACIENTE\n");
        printf("2-CADASTRAR MEDICO\n");
        printf("3-EXIBIR CADASTROS\n");
        printf("4-SAIR DO MENU\n");
        scanf("%d", &escolha);

        switch (escolha) {
        case 1:
            printf("Digite quantas pessoas vao ser cadastradas:\n");
            scanf("%d", &n1);

            // realocar memória
            cadastro *tempPacientes = realloc(passiente, (totalPacientes + n1) * sizeof(cadastro));
            if (tempPacientes == NULL) {
                printf("Erro ao alocar memória.\n");
                exit(1);
            }
            passiente = tempPacientes;

            // cadastrar
            cadastarPacientes(passiente, totalPacientes, n1);
            totalPacientes += n1;
            break;

        case 2:
            printf("Digite quantos médicos vão ser cadastrados:\n");
            scanf("%d", &n2);

            medico *tempMedicos = realloc(doutor, (totalMedicos + n2) * sizeof(medico));
            if (tempMedicos == NULL) {
                printf("Erro ao alocar memória.\n");
                exit(1);
            }
            doutor = tempMedicos;

            cadastrarMedicos(&doutor[totalMedicos], n2);
            totalMedicos += n2;
            break;

        case 3:
            mostrarDados(passiente, doutor, totalPacientes, totalMedicos);
            break;
        }
    } while (escolha != 4);

    free(passiente);
    free(doutor);

    return 0;
}

