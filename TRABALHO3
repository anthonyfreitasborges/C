#include <stdio.h>
#include <stdlib.h>
#include <string.h>
typedef struct{
    int id;
    char nome[20];
    int idade;
    int cpf;
    int plano;
}cadastro;

typedef struct{
    int id;
    char nome[20];
    int crm;
    char especialidade[30];
    char disponibilidade[10];
}medico;

typedef struct{
    int idConsulta[10];
    int idPaciente[10];
    int idMedico[10];
    int data;
}campo;

typedef struct{
    int idConsulta;
    int idPaciente;
    int idMedico;
    char data[10];
    char hora[5];

}agendar;
int cadastarPacientes(cadastro *passiente,int inicio, int n1){
	int t,y;

    for (int i = inicio; i < inicio + n1; i++){
        passiente[i].id=i;
        printf(":: %d\n",passiente[i].id);
        printf("digite os paciente %d\n",i);
        printf("digite o nome\n");
        getchar();
		fgets(passiente[i].nome,20,stdin);
		passiente[i].nome[strcspn(passiente[i].nome, "\n")] = '\0';
     	printf("digite a idade \n");
     	scanf("%d",&passiente[i].idade);
     	while (getchar() != '\n');
     		do{
  	  			if(passiente[i].idade<0){
       		 	printf("idade invalida \n digite novamente\n");
        		scanf("%d",&passiente[i].idade);
        		if(passiente[i].idade<0){
            	t=1;
        		}else{
        			t=0;}
		     	}
            }while(t !=0);
     printf("digite o cpf \n");
    	scanf("%d",&passiente[i].cpf);
    	while (getchar() != '\n');
   		 for(int y=0;y<i;y++){
        	if(passiente[y].cpf == passiente[i].cpf){
        		printf("cpf ja foi usado \n digite um outro\n");
        		int temp=passiente[i].cpf;
        		scanf("%d",&passiente[i].cpf);
        		while (getchar() != '\n');
        		if(passiente[i].cpf==temp){
            	y--;}
        	}
    }
       printf("tem plano (0-nao, 1-sim) \n");
    	scanf("%d",&passiente[i].plano);

    }


    return n1;
}

int cadastrarMedicos(medico *doutor,int n2){
	int temp=0;
	for(int i=0;i<n2;i++){
        doutor[i].id=i;
		printf("digite o nome do medico\n");
		while (getchar() != '\n');  // limpa o buffer
		fgets(doutor[i].nome,20,stdin);
	    printf("digite o CRM do medico \n");
        scanf("%d",&doutor[i].crm);
        if(i>0){
        	 for(int y=0;y<i;y++){
        	 if(doutor[y].crm == doutor[i].crm){
        		printf("CRM ja foi usado digite um outro\n");
        		int temp=doutor[i].crm;
        		scanf("%d",&doutor[i].crm);
        		if(doutor[i].crm==temp){
            	y--; }
        	}
		 }
		}
        printf("digite a especialidade do medico\n");
		while (getchar() != '\n');  // limpa o buffer
		fgets(doutor[i].especialidade,30,stdin);
		printf("digite a disponibilidade do medico\n");
		fgets(doutor[i].disponibilidade,10,stdin);
	}
}



void mostrarDados(cadastro *passiente,medico *doutor, int n1,int n2) {
    printf("\n--- Lista de Pacientes ---\n");
    for (int i = 0; i < n1; i++) {
        printf("ID: %d\n", passiente[i].id);
        printf("Nome: %s\n", passiente[i].nome);
        printf("Idade: %d\n", passiente[i].idade);
        printf("CPF: %d\n", passiente[i].cpf);
        printf("Plano: %s\n", passiente[i].plano ? "Sim" : "Não");
        printf("----------------------------\n");
    }
    printf("\n--- Lista de medicos ---\n");
    for (int in = 0; in < n2; in++) {

        printf("ID: %d\n",doutor[in].id);
        printf("Nome: %s\n", doutor[in].nome);
        printf("CRM: %d\n", doutor[in].crm);
        printf("ESPECIALIDADE: %s\n", doutor[in].especialidade);
        printf("DISPONIBILIDADE: %s\n", doutor[in].disponibilidade);
        printf("----------------------------\n");
    }
}



 void cadastarConsulta(cadastro *passiente,agendar *consulta,medico *doutor,int ct,int maxCon,int maxPac){
     int num1,num2;
     char data[10];
     char hora[5];
        printf("agendar consulta \n");
        for(int i=maxCon;i<ct;i++){
            printf("digite o id do paciente a ser agendado:\n");
            scanf("%d",&num1);
            for(int z=0;z<maxPac;z++){
                if(num1==passiente[z].id){
                    consulta[i].idPaciente=num1;
                }
            }
            printf("digite o id do medico a ser agendado:\n");
            scanf("%d",&num2);
            for(int y=0;y<=maxPac;y++){
                if(num2==doutor[y].id){
                    consulta[i].idMedico=num2;
                }
            }

            printf("          consulta a ser agendada\n");
            printf("digite a data d/m/a :\n");
            getchar();
            fgets(consulta[i].data,10,stdin);
            consulta[i].data[strcspn(consulta[i].data, "\n")] = '\0';
            printf("digite a hora h:m :\n");
            getchar();
            fgets(consulta[i].hora,5,stdin);
            consulta[i].hora[strcspn(consulta[i].hora, "\n")] = '\0';
            if(maxCon==0){
                printf("primeira consulta feita");
            }else{
            for(int d=0;d<maxPac;d++){
                if(strcmp(consulta[i].data,consulta[d].data)==0 && strcmp(consulta[i].hora,consulta[d].hora)==0){
                    printf("invalido data com esse horario ja foi preenchida,digite um outro horario:");
                    char temp1[5];
                    strcpy(temp1, consulta[i].hora);
                    scanf("%s",&consulta[i].hora);
                    if(strcmp(consulta[i].hora,temp1)==0){
                        d--;
                    }
                }
               }
            }
        }
 }


int main() {
    int escolha, n1, n2,ct=0,totalconsulta=0;
    int totalPacientes = 0, totalMedicos = 0;
    cadastro *passiente = NULL;
    medico *doutor = NULL;
    agendar *consulta=NULL;
    printf("MENU\n");

    do {
        printf("1-CADASTRAR PACIENTE\n");
        printf("2-CADASTRAR MEDICO\n");
        printf("3-EXIBIR CADASTROS\n");
        printf("4-CADASTRAR CONSULTA\n");
        printf("5-SAIR DO MENU\n");
        scanf("%d", &escolha);

        switch (escolha) {
        case 1:
            if(totalPacientes>20){
                printf("limite de pessoas cadastradas atingido");
                break;
            }else{
            printf("Digite quantas pessoas vao ser cadastradas:\n");
            scanf("%d", &n1);
            passiente= realloc(passiente, (totalPacientes + n1) * sizeof(cadastro));
            if (passiente == NULL) {
                printf("Erro ao alocar memória.\n");
                exit(1);
            }
            cadastarPacientes(passiente, totalPacientes, n1);
            totalPacientes += n1;
            }
            break;

        case 2:
            printf("Digite quantos médicos vão ser cadastrados:\n");
            scanf("%d", &n2);

            medico *tempMedicos = realloc(doutor, (totalMedicos + n2) * sizeof(medico));
            if (tempMedicos == NULL) {
                printf("Erro ao alocar memória.\n");
                exit(1);
            }
            doutor = tempMedicos;

            cadastrarMedicos(&doutor[totalMedicos], n2);
            totalMedicos += n2;
            break;

        case 3:
            mostrarDados(passiente, doutor, totalPacientes, totalMedicos);
            break;
        case 4:
            ct++;
            consulta = realloc(consulta,ct * sizeof(agendar));
            cadastarConsulta(passiente,consulta,doutor,ct,totalconsulta,totalPacientes);
            totalconsulta=ct;
            break;
        }
    } while (escolha != 5);

    free(passiente);
    free(doutor);

    return 0;
}
